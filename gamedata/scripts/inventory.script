belt = {}
belt_id = {}
belt_status = false

local need_update = true
local inventory_open = false
local separator_spawned = false
local separator = "separator"

local debug = false
local flag

function update()

	if (need_update == false) then return end

	if debug == true and belt_status == true then get_console():execute("belt_status=false") end
	belt_status = false

	-- Спавним разделяющий елемент
	if (separator_spawned == false) then
		alife():create(separator,
			db.actor:position(),
			db.actor:level_vertex_id(),
			db.actor:game_vertex_id(),
			db.actor:id())
		separator_spawned = true
		if debug == true then get_console():execute("separator_spawned") end
		return
	end

	belt = {}
	belt_id = {}
	flag = 0

	-- Сканируем инвентарь
	db.actor:inventory_for_each(scan_inv)
	need_update = false

	-- Удаляем разделяющий елемент
	db.actor:inventory_for_each(del_separator)
	separator_spawned = false

	if debug == true and belt_status == false then get_console():execute("belt_status=true") end
	belt_status = true

	if debug == true then
		for i,k in pairs(belt) do
			get_console():execute(i.."="..k)
		end
	end
end

-- Перебор предметов инвентаря
function scan_inv(item)
	local section = item:section()

	if section == separator then
		flag = 1
		return
	end

	if flag == 1 then
		if slot_item(item) ~= nil then
			flag = 2
		else
			insert_to_table(belt, section)
			belt_id[item:id()] = true
		end
	end
end

-- Добавление в таблицу
function insert_to_table(tbl, section)
	if tbl[section] == nil then
		tbl[section] = 1
	else
		tbl[section] = tbl[section] + 1
	end
end

-- Удаление разделяющего предмета
function del_separator(item)
	if item:section() == separator then
		alife():release(alife():object(item:id()), true)
		if debug == true then get_console():execute("separator_removed") end
	end
end

-- Определение налечия предмета в одном из слотов
function slot_item(item)
	for i=0,12 do
		local obj = db.actor:item_in_slot(i)
		if obj and item:id() == obj:id() then
			return i
		end
	end

	return nil
end

-- Поднятие предмета
function on_item_take(item)
	if item:section() == separator then return end

	if (inventory_open == false) then
		if (separator_spawned == true) then
			db.actor:inventory_for_each(del_separator)
			separator_spawned = false
		end

		need_update = true
		if debug == true then get_console():execute("item_take") end
	end
end

-- Выброс предмета
function on_item_drop(item)
	if item:section() == separator then return end

	if (inventory_open == false) then
		if (separator_spawned == true) then
			db.actor:inventory_for_each(del_separator)
			separator_spawned = false
		end

		need_update = true
		if debug == true then get_console():execute("item_drop") end
	end
end

-- Открытие/закрытие инвентаря
function on_inventory_info(info_id)
	if info_id == "ui_inventory" then
		inventory_open = true
		if debug == true then get_console():execute("inventory_open") end

	elseif info_id == "ui_inventory_hide" then
		inventory_open = false
		need_update = true
		if debug == true then get_console():execute("inventory_close") end
	end
end

function check_blood()
--   if belt_status == true then
      if belt["af_blood"]~=nil and belt["af_blood"]>0 then -- то есть когда параметр пояса[af_blood] равен 1, 2, 3.. Сколько навесишь Камней.
--             amk.send_tip("Кровь Камня на поясе")
          end
--   end
end

-- таблица детекторов
local detectors = {
	['detector_elite_sak'] = true,
	['detector_advances'] = true,
	['detector_elite'] = true
	}
-- таблица детекторов на пояс
local det_belt = {
	['detector_elite_sak_tobelt'] = true,
	['detector_advances_tobelt'] = true,
	['detector_elite_tobelt'] = true
	}
-- таблица подмены для пояса(для каждого детектора иммитатор в названии имеет суффикс "_relief")
local relief = {
	['detector_elite_sak_relief'] = true,
	['detector_advances_relief'] = true,
	['detector_elite_relief'] = true
	}
-- таблица подмены в рюкзаке(для каждого детектора иммитатор в названии имеет суффикс "_rukzak")
local rukzak = {
	['detector_elite_sak_rukzak'] = true,
	['detector_advances_rukzak'] = true,
	['detector_elite_rukzak'] = true
	}

function check_detectors()
	local detector,dell_obj,sect,sobj
	-- перебор по идам:
	for k, v in pairs(belt_id) do
		sobj = alife():object(k)
		if sobj then
			sect = sobj:section_name()
			-- если это детектор - удалить, подменить.
			-- на поясе
			if (detectors[sect] or det_belt[sect]) and belt[sect] ~= nil and belt[sect] > 0 then
				dell_obj = sobj
				detector = sect..'_relief'
				belt[sect] = belt[sect] - 1
			-- в рюкзаке
			elseif (detectors[sect] or det_belt[sect]) or (relief[sect] and belt[sect] == nil) then
				dell_obj = sobj
				detector = sect..'_rukzak'
			end
			if dell_obj then
				alife():release(dell_obj, true)
				amk.spawn_item_in_inv(detector, db.actor)
			end
		end
	end
end

function repair_detectors()
	local detector,dell_obj,len,sect,sobj
	-- перебор по идам:
	for k, v in pairs(belt_id) do
		sobj = alife():object(k)
		if sobj then
			sect = sobj:section_name()
			-- если это фальш_детектор - удалить, подменить.
			if relief[sect] or rukzak[sect] or (det_belt[sect] and belt[sect] == nil) then
				len = string.len(sect)
				-- в рюкзаке
				detector = string.sub(sect,1,len-7)
				-- на поясе
				if belt[sect] ~= nil and belt[sect] > 0 then
					detector = detector..'_tobelt'
				end
				alife():release(sobj, true)
				amk.spawn_item_in_inv(detector, db.actor)
			end
		end
	end
end
