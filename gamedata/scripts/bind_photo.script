--[[--------------------------------------------------------------------------------------
 File			: bind_photo.script
 Description	: Биндер фотокамеры.
 Copyright		: 2012 © boryan67
 Author			: boryan67(Dracula)
 Last edit		: 09.09.2012 
--]]--------------------------------------------------------------------------------------
local tbl_photo = {}	-- динамическая таблица доступных целей
-- таблица целей для съёмки
-- формат имя/секция, минимальная дистанция, максимальная дистанция, кость

local tbl_target = {
	{name="brown", dist_min=1, dist_max=4, bone="bip01_head"},	-- 1 Браун
	{name="smith", dist_min=1, dist_max=4, bone="bip01_head"},	-- 2 Смит
	{name="nato_enginer", dist_min=1, dist_max=4, bone="bip01_head"},	-- 3 Марио
	{name="barman_new", dist_min=1, dist_max=2.5, bone="bip01_head"},	-- 4 Барон
	{name="razuvaev", dist_min=1, dist_max=4, bone="bip01_head"},	-- 5 Разуваев
	{name="komandir_petrenko", dist_min=1, dist_max=4, bone="bip01_head"},  -- 6 Петренко
	{name="mk_bratok_bar_song", dist_min=1, dist_max=4, bone="bip01_head"}, -- 7 Браток_Бар
	{name="shpak", dist_min=1, dist_max=4, bone="bip01_head"},	-- 8 Шпак
	{name="komandir_voronin", dist_min=1, dist_max=3, bone="bip01_head"},	-- 9 Воронин
	{name="uchen_saharov", dist_min=1, dist_max=1.5, bone="bip01_head"},	-- 10 Сахаров
	{name="uchen_kaymanov", dist_min=1, dist_max=4, bone="bip01_head"},	-- 11 Кайманов
	{name="haron_new", dist_min=1, dist_max=4, bone="bip01_head"},	-- 12 Харон
	{name="borovikov", dist_min=1, dist_max=2.5, bone="bip01_head"},	-- 13 Боря Серов
	{name="dron", dist_min=1, dist_max=4, bone="bip01_head"},	-- 14 Дрон
	{name="bar_barman", dist_min=1, dist_max=2.5, bone="bip01_head"},	-- 15 Дядя Миша
	{name="osvedom", dist_min=1, dist_max=4, bone="bip01_head"},	-- 16 Связной
	{name="brigadir", dist_min=1, dist_max=4, bone="bip01_head"},	-- 17 Бригадир
	{name="brityi", dist_min=1, dist_max=4, bone="bip01_head"},	-- 18 Бритый
	{name="bar_bar_visitor_hunter", dist_min=1, dist_max=4, bone="bip01_head"}, -- 19 Вадик (Бар)
	{name="semyon", dist_min=1, dist_max=4, bone="bip01_head"},	-- 20 Семён
	{name="djonny", dist_min=1, dist_max=4, bone="bip01_head"},	-- 21 Эдик
	{name="bar_leha", dist_min=1, dist_max=4, bone="bip01_head"},	-- 22 Лёха
	{name="neytral_08", dist_min=1, dist_max=4, bone="bip01_head"},	-- 23 Серый
	{name="neytral_09", dist_min=1, dist_max=4, bone="bip01_head"},	-- 24 Флинт
	{name="bar_ataka_03", dist_min=1, dist_max=4, bone="bip01_head"},	-- 25 Димос
	{name="neytral_16", dist_min=1, dist_max=4, bone="bip01_head"},	-- 26 Женёк
	{name="neytral_20", dist_min=1, dist_max=4, bone="bip01_head"},	-- 27 Павлик
	{name="bar_ataka_01", dist_min=1, dist_max=4, bone="bip01_head"},	-- 28 Левша
	{name="bar_ataka_04", dist_min=1, dist_max=4, bone="bip01_head"},	-- 29 Санчо
	{name="bar_ataka_05", dist_min=1, dist_max=4, bone="bip01_head"},	-- 30 Юра
	{name="bar_digger_kamp5", dist_min=1, dist_max=4, bone="bip01_head"},	-- 31 Бром
	{name="shershen", dist_min=1, dist_max=4, bone="bip01_head"},	-- 32 Шершень
	{name="volk", dist_min=1, dist_max=4, bone="bip01_head"},	-- 33 Волк
	{name="lis", dist_min=1, dist_max=4, bone="bip01_head"},	-- 34 Лис
	{name="prizrak", dist_min=1, dist_max=4, bone="bip01_head"},	-- 35 Призрак
	{name="babay", dist_min=1, dist_max=4, bone="bip01_head"},	-- 36 Бабай
	{name="greta", dist_min=1, dist_max=4, bone="bip01_head"},	-- 37 Грета
	{name="lukash", dist_min=1, dist_max=4, bone="bip01_head"},	-- 38 Лукаш
	{name="max", dist_min=1, dist_max=4, bone="bip01_head"},	-- 39 Макс
	{name="kep", dist_min=1, dist_max=4, bone="bip01_head"},	-- 40 Кэп
	{name="skryaga", dist_min=1, dist_max=4, bone="bip01_head"},	-- 41 Скряга
	{name="kock", dist_min=1, dist_max=4, bone="bip01_head"},	-- 42 Джанго
	{name="shurup", dist_min=1, dist_max=4, bone="bip01_head"},	-- 43 Шуруп
	{name="mk_bratok_kbore", dist_min=1, dist_max=4, bone="bip01_head"},	-- 44 Браток у Бара
	{name="mk_ohr_borov", dist_min=1, dist_max=4, bone="bip01_head"}, -- 45 Охранник Бори
	{name="feldsher", dist_min=1, dist_max=4, bone="bip01_head"},	-- 46 Фельдшер
	{name="mk_zhorik", dist_min=1, dist_max=4, bone="bip01_head"},	-- 47 Жорик
	{name="novichok_01", dist_min=1, dist_max=4, bone="bip01_head"},	-- 48 Шустрый
	{name="mk_npc_mafon", dist_min=1, dist_max=3, bone="bip01_head"},  -- 49 Браток с Крысоловом
	{name="zubarev", dist_min=1, dist_max=4, bone="bip01_head"},	-- 50 Зубарев
	{name="poet", dist_min=1, dist_max=4, bone="bip01_head"},	-- 51 Стихоплёт
	{name="mk_dezertir_fort", dist_min=1, dist_max=4, bone="bip01_head"},	-- 52 Дезертир на МК
	{name="uchen_01", dist_min=1, dist_max=4, bone="bip01_head"},	-- 53 Флейшман
	{name="uchen_02", dist_min=1, dist_max=4, bone="bip01_head"},	-- 54 Семёнов
	{name="uchen_03", dist_min=1, dist_max=4, bone="bip01_head"},	-- 55 Гуревич
	{name="uchen_04", dist_min=1, dist_max=4, bone="bip01_head"},	-- 56 Ройзманн
	{name="uchen_05", dist_min=1, dist_max=4, bone="bip01_head"},	-- 57 Дроздов
	{name="uchen_06", dist_min=1, dist_max=4, bone="bip01_head"},	-- 58 Плоймар
	{name="bratok_bar_06", dist_min=1, dist_max=4, bone="bip01_head"}, -- 59 Браток в тельняшке
	{name="zhila", dist_min=1, dist_max=4, bone="bip01_head"},	-- 60 Жила
	{name="krysolov", dist_min=1, dist_max=4, bone="bip01_head"},	-- 61 Крысолов
	{name="swamp_doctor", dist_min=1, dist_max=4, bone="bip01_head"},	-- 62 Доктор
	{name="vasil_swamp", dist_min=1, dist_max=4, bone="bip01_head"},	-- 63 Васильев
	{name="kruglov_swamp", dist_min=1, dist_max=4, bone="bip01_head"},	-- 64 Круглов
	{name="kaymanov_ohr1", dist_min=1, dist_max=4, bone="bip01_head"},	-- 65 Охранник-1
	{name="kaymanov_ohr2", dist_min=1, dist_max=4, bone="bip01_head"},	-- 66 Охранник-2
	{name="bar_bar_drunk_dolg", dist_min=1, dist_max=4, bone="bip01_head"}, -- 67 Бар_посетитель
	{name="bar_bar_visitors_3_2", dist_min=1, dist_max=4, bone="bip01_head"}, -- 68 Бар_посетитель
	{name="bar_bar_visitors_3_3", dist_min=1, dist_max=4, bone="bip01_head"}, -- 69 Бар_посетитель
	{name="bar_bar_visitors_3_4", dist_min=1, dist_max=4, bone="bip01_head"}, -- 70 Бар_посетитель
	{name="bar_bar_lisiy", dist_min=1, dist_max=4, bone="bip01_head"}, -- 71 Бар_посетитель
	{name="bar_bar_visitors_2_1", dist_min=1, dist_max=4, bone="bip01_head"}, -- 72 Бар_посетитель
	{name="bar_ataka_02", dist_min=1, dist_max=4, bone="bip01_head"}, -- 73 Бар_Диггер
	{name="blokpost_01", dist_min=1, dist_max=4, bone="bip01_head"}, -- 74 Бар_часовой
	{name="blokpost_02", dist_min=1, dist_max=4, bone="bip01_head"}, -- 75 Бар_часовой
	{name="blokpost_03", dist_min=1, dist_max=4, bone="bip01_head"}, -- 76 Бар_часовой
	{name="filin", dist_min=1, dist_max=4, bone="bip01_head"}, -- 77 Филин (Бар)
	{name="lesnik", dist_min=1, dist_max=4, bone="bip01_head"}, -- 78 Лесник
	{name="sutuly", dist_min=1, dist_max=4, bone="bip01_head"}, -- 79 Сутулый
	{name="mazay", dist_min=1, dist_max=4, bone="bip01_head"}, -- 80 Мазай
	{name="grek", dist_min=1, dist_max=4, bone="bip01_head"}, -- 81 Грек
	{name="zahar", dist_min=1, dist_max=4, bone="bip01_head"}, -- 82 Захар
	{name="osvedom_new", dist_min=1, dist_max=4, bone="bip01_head"}, -- 83 Связной_Лес
	{name="osvedom_dva", dist_min=1, dist_max=4, bone="bip01_head"}, -- 84 Связной_Бар
	{name="genrih", dist_min=1, dist_max=4, bone="bip01_head"}, -- 85 Генрих
	{name="yurgen", dist_min=1, dist_max=4, bone="bip01_head"}, -- 86 Юрген
	{name="jagger", dist_min=1, dist_max=4, bone="bip01_head"}, -- 87 Джаггер
	{name="missis_uchen", dist_min=1, dist_max=4, bone="bip01_head"}, -- 88 Гертруда
	{name="uchen_mg1", dist_min=1, dist_max=4, bone="bip01_head"}, -- 89 Учёный1
	{name="uchen_mg2", dist_min=1, dist_max=4, bone="bip01_head"}, -- 90 Учёный2
	{name="uchen_mg3", dist_min=1, dist_max=4, bone="bip01_head"}, -- 91 Учёный3
	{name="petrograf", dist_min=1, dist_max=4, bone="bip01_head"}, -- 92 Петрограф
	{name="sidor", dist_min=1, dist_max=4, bone="bip01_head"}, -- 93 Сидорович
	{name="plichko_dolg", dist_min=1, dist_max=4, bone="bip01_head"}, -- 94 Пличко
	{name="zapadlo", dist_min=1, dist_max=4, bone="bip01_head"}, -- 95 Западло
	{name="verka", dist_min=1, dist_max=4, bone="bip01_head"}, -- 96 Верка
	{name="dunya", dist_min=1, dist_max=4, bone="bip01_head"} -- 97 Дуня
}

-- Сканер целей
function IsTarget(obj)
	local x = 0
	if not obj then return x end
	local sect = obj:section()
	local name = obj:name()
	if name then 
		-- ищем совпадение в таблице
		for x,v in pairs (tbl_target) do
			if name==v.name or sect==v.name then
				return x -- возвращаем номер совпавшего элемента таблицы
			end
		end
	end
	return x
end
---------------------------------------------------------------------------------------------
function init(obj)
	local new_binder = photo_binder(obj)
	obj:bind_object(new_binder)
end

class "photo_binder" (object_binder)
function photo_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function photo_binder:reload(section)
	object_binder.reload(self, section)
	self.sound_ok = sound_object([[starter\weapons\fot\fot_ok]])
	self.sound_poor = sound_object([[starter\weapons\fot\fot_poor]])
end

function photo_binder:reinit()
	object_binder.reinit(self)
end

function photo_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end
	self.lbutton_pressed = false
	self.rbutton_pressed = false
	self.first_update = true
	self.target = nil
	self.last_ammo_elapsed = 0
	self.last_in_slot = false
	self.new_target = false
	return true
end

function photo_binder:update(delta)
	object_binder.update(self, delta)
	if not has_alife_info("start_photo") then return end	-- нет разрешения фотогрфировать
	local ammo_elapsed = self.object:get_ammo_in_magazine()
	local accuracy = db.actor:accuracy()
	--позиция камеры
	self.photo_pos = device().cam_pos
	self.photo_dir = device().cam_dir

	if self.first_update then
		self.first_update = false
		self.last_ammo_elapsed = ammo_elapsed
		return
	end
	
	-- Определяем что делаем с левой кнопокой мыши
	local num = self.last_ammo_elapsed - ammo_elapsed
	if num > 0 then -- это либо первое нажатие, либо удержание
		if not self.lbutton_pressed then -- первое нажатие
			self:OnLButtonDown()
			self.lbutton_pressed = true
		else -- удерживание
			self:OnLButtonHold(delta)
		end
	elseif self.lbutton_pressed then -- отпускание
		self:OnLButtonUp()
		self.lbutton_pressed = false
	end
	self.last_ammo_elapsed = ammo_elapsed
	---- Аналогично отрабатываем для правой кнопки мыши ---------
	if accuracy*1000 < 1 then -- это либо первое нажатие, либо удержание
		if not self.rbutton_pressed then -- первое нажатие
			self:OnRButtonDown()
			self.rbutton_pressed = true
		else -- удерживание
			self:OnRButtonHold(delta)
		end
	elseif self.rbutton_pressed then -- отпускание
		self:OnRButtonUp()
		self.rbutton_pressed = false
	end
end

function photo_binder:net_destroy()
	self.rbutton_pressed = false
	self.lbutton_pressed = false
	tbl_photo = {}
	object_binder.net_destroy(self)
end

function photo_binder:net_save_relevant()
	return true
end

function photo_binder:save(packet)
	object_binder.save(self, packet)
end

function photo_binder:load(reader)
	self.loaded = true
	object_binder.load(self, reader)
end

-----------------------------------------------------------------------------------
-- поиск объекта в конусе экспозиции
function photo_binder:exposure(cone)
	if not cone then cone = 0.9848 end -- 10 градусов
	local exp_id = nil
	local exp_obj = nil
	local dist_min = 100
	local obj
	local str_num = 0
	-- сканируем таблицу доступных целей
	for id,v in pairs (tbl_photo) do	
		obj = level.object_by_id(id)
		if obj  then
			local obj_pos
			local x = tbl_target[v]	-- получили параметры из таблицы
			if x.bone then obj_pos = obj:bone_position("bip01_head")	-- целимся в голову
			else obj_pos = obj:position()	-- иначе в позицию цели
			end
			local target_dir = vector():sub(obj_pos,self.photo_pos):normalize()
			local target_cos = self.photo_dir:dotproduct(target_dir)
			if target_cos > cone then -- цель в конусе экспозиции  
				if (x.bone and obj:see(db.actor)) or (not x.bone) then -- и лицом к объективу или это предмет
					local cur_dist = self.photo_pos:distance_to(obj_pos)	-- расстояние до объекта				
					if cur_dist > x.dist_min and cur_dist < x.dist_max and cur_dist < dist_min then -- если в допуске
						dist_min = cur_dist	-- фокусируем на ближайшем объекте в конусе экспозиции
						exp_id = id
						exp_obj = obj
					end
				end	
			end
		else
			tbl_photo[id] = nil
		end
	end
	self.target = exp_obj -- запомнили объект
	self.target_id = exp_id -- запомнили id
	if exp_obj and exp_id then
		self.exposured = true
	else
		self.exposured = false 
	end
end
-- нажатие ПКМ
function photo_binder:OnRButtonDown()
	tbl_photo = {}	-- чистим таблицу целей
	local obj
	local str_num
	for id=1,65534 do
		obj = level.object_by_id(id)	-- ищем на текущем уровне
		if obj then -- есть объект
			str_num = IsTarget(obj)	-- запрашиваем идентификацию цели
			if str_num > 0 then	-- если это наша цель
				tbl_photo[id] = str_num	-- запомним его ид и номер строки в таблице целей
			end
		end 
	end
end
-- Удержание ПКМ
function photo_binder:OnRButtonHold(delta)
	self:exposure(0.999)	-- ищем объект в видоискатель
	-- Защита от зависания биндера при исчезновении объекта 
	if not level.object_by_id(self.target_id) then
		tbl_photo[self.target_id] = nil
		self.target = nil
		self.target_id = nil
		return
	end
	if self.target then
		if not self.new_target then	-- если цель захватили играем звук захвата
			self.new_target = true
			self.sound_ok:play_at_pos(db.actor, self.photo_pos, 0, 0)
		end
	else
		if self.new_target then	-- если цель потеряли играем звук потери
			self.new_target = false
			self.sound_poor:play_at_pos(db.actor, self.photo_pos, 0, 0)
		end
	end
end 
-- Отпускание ПКМ
function photo_binder:OnRButtonUp()
	self.new_target = false
	self.target = nil
end
-- Нажатие ЛКМ
function photo_binder:OnLButtonDown() 
	-- если есть цель
	if self.exposured then
		local str_num = tbl_photo[self.target_id]
		local info = "info_target"..str_num
		if not has_alife_info(info) then
			-- делаем снимок в рюкзак
			local obj=alife():create("foto_news", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
			if obj then
				local text = "Получен новый снимок для газеты."
				news_manager.send_tip(db.actor, text, 1, nil, 10000)
				db.actor:give_info_portion(info)
			end
		end 
	end
	self.exposured = false
	self.target = nil
end
-- удержание ЛКМ
function photo_binder:OnLButtonHold(delta) 

end
-- отпускание ЛКМ
function photo_binder:OnLButtonUp() 

end
-- Взяли в руки
function photo_binder:OnTake()

end
-- Держим в руках
function photo_binder:OnHold(delta)

end
-- Убрали
function photo_binder:OnRemove()
	self.rbutton_pressed = false
	self.lbutton_pressed = false
end
