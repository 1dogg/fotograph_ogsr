-- solid_list основан на Linspiro Addon v1.1


local rare_list = {

 novice_section = {
 "wpn_walther",
 "wpn_toz34",
 "ammo_vog-25p",
 "ammo_m209",
 "ammo_9x39_pab9",
 "ammo_9x39_ap",
 "ammo_9x39_sp5"
 },

 experienced_section = {
 "ammo_7.62x54_7h1",
 "ammo_7.62x54_ap",
 "ammo_7.62x54_7h14",
 "ammo_og-7b",
 "wpn_ak74",
 "wpn_abakan"
 },

 veteran_section = {
 "wpn_l85",
 "wpn_lr300",
 "wpn_groza"
 },

master_section = {
 "wpn_vintorez",
 "wpn_svu",
 "wpn_svd",
 "af_simbion",        
 "wpn_g36"  
 }
}

local solid_list = {
 novice_section = {
 --Аммуниция--
 "grenade_rgd5",
 "ammo_12x70_buck",     
 "ammo_9x19_fmj",
 "ammo_9x19_pbp",
 "ammo_9x18_pmm",
 "ammo_9x18_fmj",
 --Оружие--
 "wpn_addon_silencer",
 "wpn_microuzi",
 "wpn_fort",
 --Прочее--
 "bread",
 "bandage",
 "kolbasa",
 "medkit",
 "vodka",
 "conserva"
 },

experienced_section = {
 --Аммуниция--
 "grenade_rgd5",
 "grenade_gd-05",
 "grenade_f1",     
 "ammo_9x19_pbp",
 "ammo_9x18_pmm",
 "ammo_5.45x39_fmj",
 "ammo_11.43x23_fmj",
 "ammo_5.56x45_ss190",
 --Пушки--
 "wpn_addon_scope",
 "wpn_microuzi",
 "wpn_ak74u",
 "wpn_ak74u_m1",
 "wpn_walther",
 --Прочее--
 "mutant_dog_tail",
 "mutant_boar_leg",
 "kolbasa",
 "medkit",
 "antirad",
 "energy_drink",
 "conserva"
 },

 veteran_section = {
 --Аммуниция--
 "grenade_f1",
 "ammo_vog-25",     
 "ammo_m209",
 "ammo_5.45x39_ap",
 "ammo_11.43x23_hydro",
 "ammo_9x39_pab9",
 "ammo_5.56x45_ss190",
 "ammo_12x76_zhekan",
 --Пушки--
 "wpn_addon_scope_susat",
 "wpn_addon_grenade_launcher",
 "wpn_walther",
 "wpn_sig550",
 "wpn_toz34",
 "wpn_abakan_m2",
 "wpn_desert_eagle",
 --Прочее--
 "mutant_psevdodog_tail",
 "mutant_snork_leg",
 "medkit_army",
 "antirad"
 },

 master_section = {
 --Аммуниция--
 "ammo_m209",
 "ammo_vog-25p",     
 "ammo_9x39_ap",
 "ammo_12x76_dart",
 "ammo_7.62x54_7h14",
 "ammo_9x39_sp5",
 "ammo_5.56x45_ap",
 "ammo_7.62x54_7h1",
 --Пушки--
 "wpn_addon_grenade_launcher_m203",
 "wpn_colt1911",
 "wpn_spas12",
 "wpn_l85",
 "wpn_lr300",
 "wpn_groza",
 "wpn_groza_m1",
 --Прочее--
 "mutant_krovosos_jaw",
 "mutant_burer_hand",
 "medkit_army",
 "medkit_scientic"
 }
}

local treasure_manager = nil
local n_rank 

function parse_spawns(line)
	if line == nil then
		return {}
	end

	--' если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
	local t = se_respawn.parse_names(line)
	local n = table.getn(t)
		
	local ret_table = {}
	local k = 1

	while k <= n do
		local spawn = {}
		spawn.section = t[k]
		-- Проверяем что это не последняя запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			-- проверяем что вторым числом задана вероятность, а не другая секция спавну
			if p then
				-- забиваем число
				spawn.prob = p
				k = k + 2
			else
				-- забиваем дефолт 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end


class "CTreasure"
function CTreasure:__init()
	--' На конструкторе вычитываем LTX и создаем заготовки квестов.
	self.ini = ini_file("misc\\treasure_manager.ltx")

	--' Итерируемся по всем настройкам фраз
	if not self.ini:section_exist("list") then
		abort("There is no section [list] in treasure_manager.ltx")
	end
	local n = self.ini:line_count("list")
	local id, value = "",""

	--' начальная установка
	self.treasure_info = {}

	for i=0,n-1 do
		result, id, value	= self.ini:r_line("list",i,"","")
		
		self.treasure_info[id] = {}

		self.treasure_info[id].target		= utils.cfg_get_number(self.ini, id, "target", nil, true)
		self.treasure_info[id].name			= utils.cfg_get_string(self.ini, id, "name", nil, true, "")
		self.treasure_info[id].description	= utils.cfg_get_string(self.ini, id, "description", nil, true, "")
		self.treasure_info[id].items		= parse_spawns(utils.cfg_get_string(self.ini, id, "items", nil, true, ""))

		local community	= parse_names(utils.cfg_get_string(self.ini, id, "community", nil, false, "", "stalker, bandit, dolg, freedom"))
		self.treasure_info[id].community = {}
		for k,v in pairs(community) do
			self.treasure_info[id].community[v] = true
		end


		if self.treasure_info[id].items == nil then
			abort("cant find 'items' in %s", id)
		end

		self.treasure_info[id].condlist		= xr_logic.parse_condlist(db.actor, "treasure_manager", "condlist", utils.cfg_get_string(self.ini, id, "condlist", nil, false, "", ""))
		
		--' Отметим тайник как новый
		self.treasure_info[id].active = false
		self.treasure_info[id].done = false

		--print_table(self.treasure_info)
	end

	--' Вспомогательные таблицы для облегчения поиска
	self.treasure_by_target = {}
	for k,v in pairs(self.treasure_info) do
		self.treasure_by_target[v.target] = k	
	end
end
--' Юзание инициатора (возможность выдать тайник)
function CTreasure:use(npc)
	printf("TREASURE USE")
	local rarets 
	
	if npc ~= nil then
	  n_rank = npc:character_rank()
	 else 
      n_rank = 0
	end
	
	-- если выбран редкий тип тайников, то снизим овероятность его выпадения
	if amk.load_variable("option_treasure", 0) == 2 then 
	  rarets = 80
	else 
      rarets = 75
  end
  if amk.is_debug then
    rarets=0
  end
	
	if math.random(100) < rarets then 
	  return
	end
	
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0

	for k,v in pairs(self.treasure_info) do
		if v.done == false and v.active == false and v.community[npc:character_community()] == true then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 and
			v.community[npc:character_community()] == true and
			v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end

	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			--' Выдать тайник
			self:give_treasure(v.k)
			break
		end
	end
 
end
--' Сохранение
function CTreasure:check()
	--' Проверка тайников
	for k,v in pairs(self.treasure_info) do
		--' Выдать тайник
		self:give_treasure(k)
	end
end
--' Выдача тайника
function CTreasure:give_treasure(k)
	local v = self.treasure_info[k]
	local obj = alife():story_object(v.target)
	if obj ~= nil then
		news_manager.send_treasure(v.name)

		--' Пометить на карте		
		local text = "%c[255,238,155,23]"..game.translate_string(v.name).."\\n".."%c[default]"..game.translate_string(v.description)
--    if not level.map_has_object_spot(obj.id,"treasure") then
      level.map_add_object_spot_ser(obj.id, "treasure", text)
--    else
--      amk.mylog("Blocking mapspot for "..obj:name())
--    end

        -- проверка, какой тип тайника выбран
		-- если тайник не классический и не именной, то заменим содержимое
		if amk.load_variable("option_treasure", 0) ~= 0 and self:named_treasure(v) == false then
		   v.items = self:give_item_list()
		end  
		
		--' Сгенерить вещи
		for kk,vv in pairs(v.items) do
			if ammo_section[vv.section] == true then
				se_respawn.create_ammo(vv.section,	
						obj.position,
						obj.m_level_vertex_id,	
						obj.m_game_vertex_id,
						obj.id,
						vv.prob)
			else
				for i=1,vv.prob do
					alife():create(vv.section,
							obj.position,
							obj.m_level_vertex_id,	
							obj.m_game_vertex_id,
							obj.id)
				end
			end
		end
		
		--' Пометим тайник как выданный
		self.treasure_info[k].active = true
		self.treasure_info[k].done = true
    -- Отправим тайник в оффлайн
    local sim = alife ()
    if sim ~= nil and obj.online then
       sim:set_switch_online  (obj.id, false)
       sim:set_switch_offline (obj.id, true)
--       sim:set_switch_online  (obj.id, true)
--       sim:set_switch_offline (obj.id, false)
       amk.convert_npc[obj.id]=1 -- ставим в очередь на вывод в онлайн
    end
	else
		printf("TREASURE %s, target doesnt exist", k)
	end
end
--' Снимаем отметку с тайника
function CTreasure:treasure_empty(box, box_story_id)
	printf("!!! treasure empty")
	local k = self.treasure_by_target[box_story_id]

	if k == nil or self.treasure_info[k] == nil then 
		return
	end

	self.treasure_info[k].active = false
	
	-- если тайник не именной, то переведен его в онлайн для следующей выдачи
	if self:named_treasure(self.treasure_info[k]) == false then
	  self.treasure_info[k].done = false
	end
	
  level.map_remove_object_spot(box:id(), "treasure")
end
--' Сохранение
function CTreasure:save(p)
	--' Сохраняем размер таблицы
	local size = 0
	for k,v in pairs(self.treasure_info) do
		size = size + 1
	end
	p:w_u16(size)
	for k,v in pairs(self.treasure_info) do
		p:w_u16(v.target)
		p:w_bool(v.active)
		p:w_bool(v.done)
	end
end
--' Загрузка
function CTreasure:load(p)
	local t = p:r_u16()
	for i = 1,t do
		local k = self.treasure_by_target[p:r_u16()]
		self.treasure_info[k].active = p:r_bool()
		self.treasure_info[k].done = p:r_bool()
	end
end

function CTreasure:give_item_list()

 local rank = 1
 local tabla = {}
 -- сколько наименований предметов будет в тайнике
 local i = math.random(1, 2)


-- считаем настройку пользователя 
 local opt = amk.load_variable("option_treasure", 0)
 
  --~ -- определим ранг непися
 --~ if nepis~= nil then
--   rank = n_rank --nepis.character_rank ()
   if n_rank == nil then n_rank = math.random(1, 9)*100 end
   if n_rank <= 300 then
     rank = 1
	elseif n_rank <=600 then
     rank = 2
    elseif n_rank <= 900 then
     rank = 3
    else 
     rank = 4
    end	 
 --~ else
   --~ rank = 1
 --~ end


 for j = 1, i, 1 do
   local cnt = 0
   local spawn = {}
  -- определим, из какой секции брать предметы, и какие именно  
   if  opt == 1 then
		if rank == 1 then
			spawn.section = solid_list.novice_section[math.random(table.getn(solid_list.novice_section))]
		elseif rank == 2 then
			spawn.section = solid_list.experienced_section[math.random(table.getn(solid_list.experienced_section))]
		elseif rank == 3 then
			spawn.section = solid_list.veteran_section[math.random(table.getn(solid_list.veteran_section))]
		else
			spawn.section = solid_list.master_section[math.random(table.getn(solid_list.master_section))]
		end
   else
		if rank == 1 then
			spawn.section = rare_list.novice_section[math.random(table.getn(rare_list.novice_section))]
		elseif rank == 2 then
			spawn.section = rare_list.experienced_section[math.random(table.getn(rare_list.experienced_section))]
		elseif rank == 3 then
			spawn.section = rare_list.veteran_section[math.random(table.getn(rare_list.veteran_section))]
		else
			spawn.section = rare_list.master_section[math.random(table.getn(rare_list.master_section))]
		end
   end	 
  
  -- установка кол-ва предметов в зависимости от секции  
   if ammo_section[spawn.section] == true then
      local ini = system_ini()
      local num_in_box = ini:r_u32(spawn.section, "box_size")
      local h = math.random(1, 5)
	  -- патроны выдаем не штуками, а пачками
	  cnt = math.random(1, h) * num_in_box
   else
      local s = tostring(spawn.section)
	  if string.find(s, "outfit") ~= nil or string.find(s, "wpn") ~= nil then
	     cnt = 1
	  elseif string.find(s, "addon") ~= nil or string.find(s, "af") ~= nil or string.find(s, "mutant") ~= nil then
         cnt = math.random(1,2)
      else 
	     cnt = math.random(1,5)
	  end   
   end
  
  -- сохраняем инфу о текущем предмете
  spawn.prob = cnt
  table.insert(tabla, spawn)
 end
 return tabla
end

function CTreasure:named_treasure(v)
 -- проверка, является ли тайник именным. Если да, то его наполнение не меняется
 if   v.name == "road_secret_001_name" 
   or v.name == "road_secret_002_name" 
   or v.name == "road_secret_003_name" 
   or v.name == "road_secret_004_name"
   or v.name == "road_secret_005_name"
   or v.name == "road_secret_006_name"
   or v.name == "road_secret_007_name"
   or v.name == "road_secret_008_name"

   or v.name == "mir_secret_001_name"
   or v.name == "mir_secret_002_name"
   or v.name == "mir_secret_003_name"
   or v.name == "mir_secret_004_name"
   or v.name == "mir_secret_005_name"
   or v.name == "mir_secret_006_name"
   or v.name == "mir_secret_007_name"
   or v.name == "mir_secret_008_name"
   or v.name == "mir_secret_009_name"

   or v.name == "prom_secret_001_name"
   or v.name == "prom_secret_002_name"
   or v.name == "prom_secret_003_name"
   or v.name == "prom_secret_004_name"
   or v.name == "prom_secret_005_name"
   or v.name == "prom_secret_006_name"
   or v.name == "prom_secret_007_name"
   or v.name == "prom_secret_008_name"
   or v.name == "prom_secret_009_name"
   or v.name == "prom_secret_010_name"
   or v.name == "prom_secret_011_name"

   or v.name == "dysh_secret_001_name"
   or v.name == "dysh_secret_002_name"
   or v.name == "dysh_secret_003_name"
   or v.name == "dysh_secret_004_name"
   or v.name == "dysh_secret_005_name"
   or v.name == "dysh_secret_006_name"

   or v.name == "les_secret_001_name"
   or v.name == "les_secret_002_name"
   or v.name == "les_secret_003_name"
   or v.name == "les_secret_004_name"
   or v.name == "les_secret_005_name"

   or v.name == "bol_secret_001_name"
   or v.name == "bol_secret_002_name"
   or v.name == "bol_secret_003_name"
   or v.name == "bol_secret_004_name"
   or v.name == "bol_secret_005_name"

   or v.name == "agr_u_secret_0000_name"
   or v.name == "agr_u_secret_0001_name"
   or v.name == "agr_u_secret_0002_name"
   or v.name == "agr_u_secret_0003_name"
   or v.name == "agr_u_secret_0004_name"

   or v.name == "x16_secret_0000_name"
   or v.name == "x16_secret_0001_name"

   or v.name == "pri_secret_0000_name"
   or v.name == "pri_secret_0001_name"
   or v.name == "pri_secret_0002_name"
   or v.name == "pri_secret_0003_name"
   or v.name == "pri_secret_0004_name"

   or v.name == "x18_secret_0000_name"
   or v.name == "x18_secret_0001_name"

   or v.name == "bar_secret_0000_name"
   or v.name == "bar_secret_0001_name"
   or v.name == "bar_secret_0002_name"
   or v.name == "bar_secret_0003_name"
   or v.name == "bar_secret_0004_name"
   or v.name == "bar_secret_0005_name"
   or v.name == "bar_secret_0006_name"
   or v.name == "bar_secret_0007_name"
   or v.name == "bar_secret_0008_name"
   or v.name == "bar_secret_0009_name"
   or v.name == "bar_secret_0010_name"
   or v.name == "bar_secret_0011_name"
   or v.name == "bar_secret_0012_name"
   or v.name == "bar_secret_0013_name"
   or v.name == "bar_secret_0014_name"
   or v.name == "bar_secret_0015_name"
   or v.name == "bar_secret_0016_name"
   or v.name == "bar_secret_0017_name"
   or v.name == "bar_secret_0018_name"
   or v.name == "bar_secret_0019_name"
 then
   return true
 else
   return false
 end    
end

function get_treasure_manager()
	if treasure_manager == nil then
		treasure_manager = CTreasure()
	end
	return treasure_manager
end

function take_item_from_box(box, box_story_id)
	printf("!!! take item from box %s", tostring(box:is_inv_box_empty()))
--	if box:is_inv_box_empty() == true then
		get_treasure_manager():treasure_empty(box, box_story_id)
--	end
end

function save(p)
	get_treasure_manager():save(p)
end
function load(p)
	get_treasure_manager():load(p)
end
function clear_treasure_manager()
	treasure_manager = nil
end
--[[
function CTreasure:dialog(npc)
	if npc ~= nil then
	  n_rank = npc:character_rank()
	 else 
      n_rank = 0
	end
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(self.treasure_info) do
		if v.done == false and v.active == false and v.community[npc:character_community()] == true then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)
			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end
			if tonumber(treasure_prob) >= 0 and
			v.community[npc:character_community()] == true and
			v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end
	if tr_sum == 0 then
		return
	end
	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			self:give_treasure(v.k)
			break
		end
	end
end
]]